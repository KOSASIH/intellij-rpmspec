{
  parserClass="com.carbonblack.intellij.rpmspec.parser.RpmSpecParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="RpmSpec"
  psiImplClassSuffix="Impl"
  psiPackage="com.carbonblack.intellij.rpmspec.psi"
  psiImplPackage="com.carbonblack.intellij.rpmspec.psi.impl"

  elementTypeHolderClass="com.carbonblack.intellij.rpmspec.psi.RpmSpecTypes"
  elementTypeClass="com.carbonblack.intellij.rpmspec.psi.RpmSpecElementType"
  tokenTypeClass="com.carbonblack.intellij.rpmspec.psi.RpmSpecTokenType"

    tokens = [
        LBRACE            =  '{'
        RBRACE            =  '}'
        LPAREN            =  '('
        RPAREN            =  ')'
        COLON             =  ':'
        PERCENT           =  '%'
        ESCAPED_PERCENT   =  '%%'
        QUESTION_MARK     =  '?'
        MINUS             =  '-'
        LT                =  '<'
        GT                =  '>'
    ]
}

rpmSpecFile ::= EOL* packageBody section*

private section ::= (packageSection|descriptionSection|changelogSection|otherSections|filesSection)

private anything ::= (wordOrMacro|'{'|'}'|'?'|'('|')'|'<'|'>')
private anyWord ::= (IDENTIFIER|BOOL_LITERAL|FLOAT_LITERAL|INTEGER_LITERAL|CODE|':'|'%%'|'-')
private wordOrMacro ::= (fullMacro|anyWord)

macroDefinition ::= (global|define) macro (wordOrMacro|'('|')')+ {pin=1}
macroUndefine ::= undefine macro {pin=1}
fullMacro ::= '%' ('{' '?'? macro (':'? wordOrMacro+)? '}'|macro ('(' anyWord ')')?) {pin=1}
macro ::= IDENTIFIER {implements="com.carbonblack.intellij.rpmspec.psi.RpmSpecMacroElement"
                      mixin="com.carbonblack.intellij.rpmspec.psi.RpmSpecMacroElementImpl"}

packageSection ::= package wordOrMacro? packageBody {pin=1}
packageBody ::= (COMMENT|EOL|<<ifExpr packageBody>>|fullMacro anyWord*|macroDefinition|macroUndefine|tag)*

meta ifExpr ::= if wordOrMacro+ EOL <<param>> section* <<elseBranch <<param>>>>? endIfExpr {pin=1}
meta elseBranch ::= else <<param>> section* {pin=1}
endIfExpr ::= endif

tag ::= PREAMBLE_TAG ':' tagValue {pin=2 implements="com.carbonblack.intellij.rpmspec.psi.RpmSpecTagElement"
                                          mixin="com.carbonblack.intellij.rpmspec.psi.RpmSpecTagElementImpl"}
tagValue ::= anything+

meta genericSection ::= <<param>> wordOrMacro? genericBody {pin=1}
genericBody ::= (COMMENT|EOL|<<ifExpr genericBody>>|macroDefinition|macroUndefine|(anything|CL_HEADER_TOKEN|CL_ITEM_TOKEN))*

descriptionSection ::= <<genericSection description>>
otherSections ::= <<genericSection (pre|prep|build|install|post|clean|check|preun|postun|pretrans|posttrans)>>

filesSection ::= files wordOrMacro? filesBody {pin=1}
filesBody ::= (filesDirective|COMMENT|EOL|<<ifExpr filesBody>>|macroDefinition|macroUndefine|fullMacro anyWord*)*
filesDirective ::= FILES_DIRECTIVE_TOKEN (filesDirective|anything)+ {pin=1}

changelogSection ::= changelog changelogBody {pin=1}
changelogBody ::= (EOL|changelogItem)*
changelogItem ::= (changelogHeader EOL changelogEntry*)
changelogHeader ::= CL_HEADER_TOKEN changelogDate changelogAuthor changelogEmail '-'? changelogVersion {pin=1}
changelogDate ::= IDENTIFIER IDENTIFIER INTEGER_LITERAL INTEGER_LITERAL
changelogAuthor ::= anyWord+
changelogEmail ::= '<' anyWord+ '>' {pin=1}
changelogVersion ::= anything+
changelogEntry ::= CL_ITEM_TOKEN (anything|EOL)+ {pin=1}
