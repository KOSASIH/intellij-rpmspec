{
  parserClass="com.carbonblack.intellij.rpmspec.parser.RpmSpecParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="RpmSpec"
  psiImplClassSuffix="Impl"
  psiPackage="com.carbonblack.intellij.rpmspec.psi"
  psiImplPackage="com.carbonblack.intellij.rpmspec.psi.impl"

  elementTypeHolderClass="com.carbonblack.intellij.rpmspec.psi.RpmSpecTypes"
  elementTypeClass="com.carbonblack.intellij.rpmspec.psi.RpmSpecElementType"
  tokenTypeClass="com.carbonblack.intellij.rpmspec.psi.RpmSpecTokenType"

    tokens = [
        LBRACE            =  '{'
        RBRACE            =  '}'
        LPAREN            =  '('
        RPAREN            =  ')'
        COLON             =  ':'
        PERCENT           =  '%'
        QUESTION_MARK     =  '?'
    ]
}

rpmSpecFile ::= packageBody item_*

private item_ ::= (packageSection|genericSection)

private anyWord ::= (IDENTIFIER|FLOAT_LITERAL|INTEGER_LITERAL|CODE|':'|'%' '%')
private wordOrMacro ::= (fullMacro|anyWord)

macroDefinition ::= (global|define) macro (wordOrMacro|'('|')')+
macroUndefine ::= undefine macro
fullMacro ::= '%' ('{' '?'? macro (':'? wordOrMacro+)? '}'|macro ('(' anyWord ')')?) anyWord*

packageSection ::= PACKAGE wordOrMacro? packageBody
packageBody ::= (COMMENT|<<IfExpr packageBody>>|fullMacro|macroDefinition|macroUndefine|tag)*

meta IfExpr ::= if wordOrMacro+ <<param>> item_* <<ElseBranch <<param>>>>? endif
meta ElseBranch ::= else <<param>> item_*

tag ::= PREAMBLE_TAG ':' (wordOrMacro|'('|')')+

genericSection ::= (description|prep|build|install|files|changelog) wordOrMacro? genericBody
genericBody ::= (COMMENT|<<IfExpr genericBody>>|macroDefinition|macroUndefine|(wordOrMacro|'{'|'}'|'?'|'('|')'|other))*



macro ::= IDENTIFIER {implements="com.carbonblack.intellij.rpmspec.psi.RpmSpecMacroElement"
                      mixin="com.carbonblack.intellij.rpmspec.psi.RpmSpecMacroElementImpl"}


private other ::= (PRE|BOOL_LITERAL|POST|CLEAN|CHECK|PREUN|POSTUN|PRETRANS|POSTTRANS)







/*private old ::= (macroDefinition|enclosedMacro|preamble|changelogHeader|mainBodyItem|COMMENT|CRLF|TEXT|CODE|KEYWORD)

mainBodyItem ::= BODY_ITEM VALUE?

macro ::= MACRO_VALUE {implements="com.carbonblack.intellij.rpmspec.psi.RpmSpecMacroElement"
                           mixin="com.carbonblack.intellij.rpmspec.psi.RpmSpecMacroElementImpl"}

enclosedMacro ::= MACRO_START (macro|enclosedMacro)+ MACRO_END?

keywordValue ::= (VALUE|enclosedMacro)+

//macroDefinition ::= KEYWORD macro keywordValue?

preamble ::= KEY SEPARATOR keywordValue

changelogHeader ::= CHANGELOG_DATE CHANGELOG_NAME CHANGELOG_EMAIL TEXT? CHANGELOG_VERSION*/
